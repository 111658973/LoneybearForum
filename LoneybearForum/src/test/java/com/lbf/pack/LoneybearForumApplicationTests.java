package com.lbf.pack;


import com.aliyun.oss.OSS;
import com.aliyun.oss.internal.OSSUtils;
import com.aliyun.oss.model.GetObjectRequest;
import com.aliyun.oss.model.PutObjectRequest;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.lbf.pack.Util.*;
import com.lbf.pack.beans.*;
import com.lbf.pack.mapper.*;
import com.lbf.pack.service.*;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.mail.javamail.JavaMailSender;


import javax.mail.MessagingException;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.*;

@SpringBootTest
class LoneybearForumApplicationTests {
    @Autowired
    RedisService redisService;
    @Autowired
    UserLoginService userLoginService;
    @Autowired
    UserLoginMapper userLoginMapper;
    @Autowired
    UserDataMapper userDataMapper;
    @Autowired
    UserEditMapper userEditMapper;
    @Autowired
    JavaMailSender mailSender;
    @Value("${spring.mail.username}")
    String username;
    @Autowired
    RedisUtil redisUtil;
    @Autowired
    StringRedisTemplate redisStringTemplate;
    @Autowired
    RedisTemplate redisTemplate;
    @Autowired
    SendEmailService sendEmailService;
    @Autowired
    Zonemapper zonemapper;
    @Autowired
    QueryDataService queryDataService;
    @Autowired
    FloorMapper floorMapper;
    @Autowired
    ElasticSearchService elasticSearchService;
    @Autowired
    BlackListService blackListService;
    @Test

    void testservice(){

        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String DF = df.format(new Date());
        System.out.println(DF);
        /**
         * Select password,username from Userbean绑定的表 where username = 'root';
         */
//        QueryWrapper<UsersBean>  queryWrapper = new QueryWrapper<>();
//        queryWrapper.select("password","username").eq("username","111658973");
//        List<UsersBean> uu = usersMapper.selectList(queryWrapper);
//        UsersBean u = usersMapper.selectOne(queryWrapper);
//        uu.forEach(System.out::println);
//        System.out.println(u);

        /**
         * update users set username = ......... where username = testuser;
         */
//        UpdateWrapper<UsersBean> updateWrapper = new UpdateWrapper<>();
//        updateWrapper.eq("username","testuser");
        UserLoginBean update = new UserLoginBean();

        update.setPhoneNumber("123819381923");
        update.setUsername("柴斌峰");
        update.setPassword("ppp");
        update.setLastVisitedTime(DF);
        UUID uuid = UUID.randomUUID();
        System.out.println(uuid);
//        usersMapper.update(update,updateWrapper);




//        UsersBean userbean = new UsersBean("123456","654321",1,"","");
        userLoginMapper.insert(update);
//
//        /**
////         *
////         */
//        QueryWrapper<UsersBean> delete = new QueryWrapper<>();
//        delete.eq("username","123456");
//        usersMapper.delete(delete);


    }
    @Test
    public void testMAP(){
        UpdateWrapper<UserEditDataBean> updateWrapper = new UpdateWrapper<>();
        updateWrapper.eq("username","test");
        UserEditDataBean update = new UserEditDataBean();

        update.setPhoneNumber("123819381923");
        update.setNick("柴斌峰");
        update.setUintroduction("ppp");

        userEditMapper.update(update,updateWrapper);

    }
    @Test
    public void mail() throws MessagingException, InterruptedException {
//        for(int i=0;i<100;i++){
//            sendEmailService.sendVerifycodeMail("binfeng.chai@gmail.com",new RandomUtils().GetRandomNickName());
//            Thread.sleep(4000);
//            System.out.println(i);
//        }
                    sendEmailService.sendVerifycodeMail("Binfeng.chai@Gmail.com",new RandomUtils().GetRandomEmailVerifyCode().toString());

    }

    @Test
    public void base64() throws IOException {
//        String imageStr = Base64Utils.GetImageStr("../static/images/testUpload/test.png");
//        System.out.println(imageStr);
//        BASE64Decoder decoder = new BASE64Decoder();
//        FileOutputStream write = new FileOutputStream(new File("./src/main/resources/static/images/testUpload/user/test.png"));
//        byte[] decoderBytes = decoder.decodeBuffer("");
//        write.write(decoderBytes);
////        write.close();
//          String a = "";
//          new Base64Utils().SaveBase64(a,"./src/main/resources/static/images/testUpload/user1/BBB","aaa.png");
    }
    @Test
    public void HtmlHandler(){

    }

    @Test
    public void OssTest() throws IOException {
        AliyunOssUtil OssUtil = new AliyunOssUtil();
        OSS client = OssUtil.getDefaultClient();
        File file = new File("/Users/chaibf/Graduation的副本/src/main/resources/static/favicon.ico");
        Map<String, Object> map = OssUtil.PutLocalFile(client,"loneybear","favicon.ico", "LoneybearForum", file);
        Map<String, Object> map1 = OssUtil.PutLocalFile(client,"loneybear","favicon.ico", "LoneybearForum", file);


    }

    @Test
    public void esTEst() throws IOException {
        ElasticSearchUtil elasticSearchUtil= new ElasticSearchUtil();
//        elasticSearchUtil.ClearIndex("loneybearforum_floors");
//        elasticSearchUtil.ClearIndex("loneybearforum_users");

//        List<FloorBean> list = floorMapper.selectList(new QueryWrapper<FloorBean>());
//        List<FloorBean> list2 = new ArrayList<>();
//        for(FloorBean f:list){
//            list2.add(queryDataService.GetFloorInfoById(f.getFid()));
//        }
//        List<Map<String, Object>> maps = queryDataService.ParseToMapList(list2);
//
//        elasticSearchUtil.updateIndex("loneybearforum_floors",maps);
//        List<UserFullDataBean> listt= userDataMapper.selectList(new QueryWrapper<UserFullDataBean>());
//        List<Map<String, Object>> mapp = queryDataService.ParseToMapList(listt);
//
//        elasticSearchUtil.updateIndex("loneybearforum_users",mapp);
        elasticSearchService.init();

    }

    @Test
    public void testRedis(){

        List<String> black = redisService.scan("blacklist");
        List<Map<String, Object>> listByKeys = redisService.getListByKeys(black);
        List<Map<String, Object>> all = blackListService.getAll();

        blackListService.getALlByZname("freetalk");
        redisService.getListByKeys(black);


    }

    @Test
    public void sdad(){
        String s = new PasswordEncoderUtil().encryptPasswrod("111658974");
        String s2 = new PasswordEncoderUtil().encryptPasswrod("111658974");
        String s3 = new PasswordEncoderUtil().encryptPasswrod("111658974");

    }
}